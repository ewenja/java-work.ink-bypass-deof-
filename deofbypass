(() => {
    const originalSetTimeout = window.setTimeout;
    const originalSetInterval = window.setInterval;
    const originalWindowOpen = window.open;

    window.setTimeout = (fn, delay) => {
        if (delay > 0) delay = 1;
        return originalSetTimeout(fn, delay);
    };
    window.setInterval = (fn, delay) => {
        if (delay > 0) delay = 1;
        return originalSetInterval(fn, delay);
    };

    let totalRetries = 0;
    let userClosed = false;

    function closeOverlay() {
        try {
            overlay.style.opacity = '0';
            closeBtn.style.opacity = '0';
            clearInterval(bypassAnimation);
            originalSetTimeout(() => {
                overlay?.parentNode?.removeChild(overlay);
                closeBtn?.parentNode?.removeChild(closeBtn);
            }, 500);
        } catch {}
        userClosed = true;
        try {
            window.open = originalWindowOpen;
        } catch {}
    }

    function clickAllStepElements(callback) {
        const backupWindowOpen = window.open;
        try {
            window.open = () => {};
        } catch (err) {
            console.warn("Could not override window.open", err);
        }

        const elements = Array.from(document.querySelectorAll(".stepcont.svelte-ck84f7 *"));
        let index = 0;

        function clickNext() {
            if (userClosed) {
                window.open = backupWindowOpen;
                return;
            }
            if (index >= elements.length) {
                try {
                    document.querySelector(".bg-green-600")?.click();
                    document.querySelector(".text-lg.font-semibold")?.click();
                } catch (err) {
                    console.warn("Error clicking buttons:", err);
                }
                window.open = backupWindowOpen;
                callback?.();
                return;
            }
            try {
                elements[index]?.click?.();
            } catch (err) {
                console.warn("Error clicking element", err);
            }
            index++;
            originalSetTimeout(clickNext, 1);
        }
        clickNext();
    }

    function clickSelector(selector, delay, onSuccess, maxRetries = 10) {
        let localRetry = 0;

        function tryClick() {
            if (userClosed) return;

            const el = document.querySelector(selector);
            if (el) {
                try {
                    el.click();
                    onSuccess?.();
                } catch (err) {
                    console.warn("Error clicking", selector, err);
                }
            } else {
                if (selector !== "DO NOTHING") {
                    localRetry++;
                    totalRetries++;

                    if (totalRetries > 10) {
                        statusMessage.textContent = "Too many retries — please refresh or contact support.";
                        closeBtn.style.display = "block";
                        closeBtn.style.opacity = '1';
                        window.open = originalWindowOpen;
                        return;
                    }

                    if (localRetry >= maxRetries) {
                        statusMessage.textContent = "This is taking longer than usual. Please contact the developer.";
                        onSuccess?.();
                        return;
                    }

                    originalSetTimeout(tryClick, delay);
                }
            }
        }

        originalSetTimeout(tryClick, delay);
    }

    const overlay = document.createElement("div");
    Object.assign(overlay.style, {
        position: "fixed",
        inset: '0',
        width: "100%",
        height: "100%",
        background: "linear-gradient(135deg, #0a2342, #004d7a)",
        zIndex: "2147483646",
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        userSelect: "none",
        opacity: '0',
        transition: "opacity 0.5s ease-in-out"
    });

    const closeBtn = document.createElement("button");
    closeBtn.textContent = '✕';
    Object.assign(closeBtn.style, {
        position: "fixed",
        top: "12px",
        right: "12px",
        background: "rgba(0,0,0,0.65)",
        color: "#ffffff",
        fontSize: "20px",
        display: "none",
        zIndex: "2147483647",
        padding: "6px 10px",
        borderRadius: "6px",
        opacity: '1',
        cursor: "pointer"
    });
    closeBtn.addEventListener("click", closeOverlay);

    document.body.appendChild(overlay);
    document.body.appendChild(closeBtn);
    requestAnimationFrame(() => {
        overlay.style.opacity = '1';
    });

    const title = document.createElement("h1");
    Object.assign(title.style, {
        color: "#00ffd7",
        fontSize: "5vw",
        fontWeight: "900",
        fontFamily: "monospace",
        textShadow: "0 0 6px #00ffd7",
        minWidth: "12ch",
        textAlign: "center"
    });

    const statusMessage = document.createElement("div");
    Object.assign(statusMessage.style, {
        color: "#a0fff0",
        fontSize: "2vw",
        fontWeight: "600",
        marginTop: "0.5em",
        textShadow: "0 0 3px #00bba1"
    });

    const progressBarContainer = document.createElement("div");
    Object.assign(progressBarContainer.style, {
        width: "40vw",
        maxWidth: "400px",
        height: "8px",
        backgroundColor: "rgba(0, 255, 215, 0.2)",
        borderRadius: "4px",
        marginTop: "2em",
        overflow: "hidden"
    });

    const progressBar = document.createElement("div");
    Object.assign(progressBar.style, {
        width: '0%',
        height: "100%",
        backgroundColor: "#00ffd7",
        borderRadius: "4px",
        transition: "width 0.3s ease"
    });

    progressBarContainer.appendChild(progressBar);

    overlay.appendChild(title);
    overlay.appendChild(statusMessage);
    overlay.appendChild(progressBarContainer);

    let dotCount = 0;
    function getBypassingText(count) {
        return "Bypassing" + ".".repeat(count) + " ".repeat(3 - count);
    }
    title.textContent = getBypassingText(dotCount);

    const bypassAnimation = setInterval(() => {
        dotCount = (dotCount + 1) % 4;
        title.textContent = getBypassingText(dotCount);
    }, 1000);
})();
